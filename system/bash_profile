#!/usr/bin/env bash

# ls shortcuts
alias l='\ls'
alias ll='\ls -lAh'
alias la='\ls -a'
alias ls='\ls -al'

# tmux
alias tmux='TERM=screen-256color-bce tmux'
alias tnew='tmux new -s'
alias tlist='tmux ls'
alias tat='tmux attach -t'

# git shortcuts
alias ga='git add .'
alias gc='git commit -m'
alias gco='git checkout'
alias gull='git pull origin master'
alias gup='git checkout master && git pull origin master'
alias gs='git status -sb'
alias got='git'
alias gut='git'
alias glog='git log --oneline --decorate'
alias lsg='git tag -l [0-9]*'
alias commits='git shortlog -s -n'

alias mem='sudo htop --sort-key PERCENT_MEM'
alias grep="GREP_COLOR='31' grep -in --color=auto 2>/dev/null"
alias bup='source ~/.bash_profile'
alias ttop='top -U $USER'
alias bedit='code ~/.bash_profile'
alias hosts='sudo code /etc/hosts'
alias doc='docker'
alias dc='docker-compose'
alias deef='docker-compose stop && docker-compose rm -svf && docker-compose up --build'
alias drmi='docker rmi -f $(docker images -f "dangling=true" -q)'
alias dvol='docker volume rm $(docker volume ls -qf dangling=true)'
alias dclean='docker rmi -f $(docker images -f "dangling=true" -q); docker volume rm $(docker volume ls -qf dangling=true)'
alias dprune='docker system prune -a'
alias dcon='docker container prune --filter "until=12h"'

# check internet connection
alias pingoo='ping -c 3 www.google.com'

if [ "$(uname)" != "Darwin" ]; then
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

# Load private stuff - keys and such
[[ -s "$HOME/.private_profile" ]] && source $HOME/.private_profile

gush() {
  git push origin $(git rev-parse --abbrev-ref HEAD)
}

# git pull origin current branch
gl() {
  git pull origin $(git rev-parse --abbrev-ref HEAD)
}

gisq() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local old_branch=gisq-old-branch
  git branch -m $old_branch
  git checkout master && git pull origin master
  git checkout -b $current_branch
  git merge --squash $old_branch
  git branch -D $old_branch
}

dkill() {
  local docker_hex=$(docker ps -aqf "name=${1}")
  docker stop $docker_hex && docker rm $docker_hex
}

# bash help
belp() {
  if [ "$#" -gt 1 ]; then
    local search=${*: -1}
    grep "${@: 0:$#}" $search $HOME/.bash_profile
  else
    grep $1 $HOME/.bash_profile
  fi
}

#locate = find
spot() {
  local where=${2:-.}
  find $where -name $1 -print
}

#launchctl load - start a process
load() {
  local plist=$(find ${HOME}/Library/LaunchAgents -name "*${1}*" | head -1)
  launchctl load $plist
}

#launchctl unload - stop a running process
unload() {
  local plist=$(find ${HOME}/Library/LaunchAgents -name "*${1}*" | head -1)
  launchctl unload $plist
}

# git clone and cd into directory
clone() {
  git clone $1 \
  && cd `echo $1 | sed -n -e 's/^.*\/\([^.]*\)\(.git\)*/\1/p'` \
  && git branch --set-upstream-to=origin/master master
}

backupToUsb() {
  local directory="/Volumes/BACKUPUSB"
  local machine=$(uname)
  if [ -d "$directory" ]; then
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/$machine-Documents.tar.gz $HOME/Documents
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/$machine-code.tar.gz $HOME/code
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/$machine-Downloads.tar.gz $HOME/Downloads
    tar -cvpzf --exclude='.git' --exclude='*.log' $directory/$machine-Work.tar.gz $HOME/Work
  else
    echo "$directory not found"
  fi
}

# Check to see if pbzip2 is already on path; if so, set BZIP_BIN appropriately
type -P pbzip2 &>/dev/null && export BZIP_BIN="pbzip2"
# Otherwise, default to standard bzip2 binary
if [ -z $BZIP_BIN ]; then
  export BZIP_BIN="bzip2"
fi
alias bz=$BZIP_BIN

tarb() {
  tar -cf "$1".tbz --use-compress-prog=$BZIP_BIN "$1"
}

untarb() {
  $BZIP_BIN -dc "$1" | tar x --exclude="._*"
}

# git branch cleaner
# clean_branches regex_matching_branch_names [test]
clean_branches() {
  if [[ $# -ne 2 ]];then
    git branch  | cut -c3- | egrep $1 | xargs git branch -d
  else
    git branch  | cut -c3- | egrep $1
  fi
}

merged_branches() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  for branch in $(git branch --merged | cut -c3-)
    do
      echo "Branch $branch is already merged into $current_branch."
      echo "Would you like to delete it? [Y]es/[N]o "
      read REPLY
      if [[ $REPLY =~ ^[Yy] ]]; then
        git branch -d $branch
      fi
  done
}

clean_remote_branches() {
  # old clean
  # if [[ $# -ne 2 ]];then
  #   matching_branches=$(git branch -r | cut -c3- | egrep $1)
  #   read remote branch <<<$(IFS="/"; echo $matching_branches)
  #   git push $remote ":$branch"
  # else
  #   git branch -r | cut -c3- | egrep $1
  # fi

  git branch -r --merged origin/master \
    | awk -F/ '/^\s*origin/ {if (!match($0, /origin\/master/)) {sub("^\\s*origin/", ""); print}}' \
    | xargs -rpn1 git push origin --delete
}

# dl is directory list
dl(){
  ls -d $1 */
}

# download the source to a files of a host
# getsrc http://www.cnn.com/
getsrc() {
  wget $1 -O - 2> /dev/null
}

# wfull www.cnn.com/full cnn.com
wfull() {
  wget \
    --recursive \
    --no-clobber \
    --page-requisites \
    --html-extension \
    --convert-links \
    --restrict-file-names=windows \
    --domains $2 \
    --no-parent \
      $1
}

# hello does a loop and says a default saying infinately or a custom saying
hello() {
  SAYTHIS="hello... my name is inigo montoya. You killed my father prepare to die"
  if [[ $1 ]]; then
    SAYTHIS=$1
  fi
  for((;;)) do say "$SAYTHIS"; done
}

# take a bash script and turn it into a Mac OSX app
appify() {
  APPNAME=${2:-$(basename "$1" ".sh")}
  DIR="$APPNAME.app/Contents/MacOS"
  if [ -a "$APPNAME.app" ]; then
    echo "$PWD/$APPNAME.app already exists :("
  fi
  if [[ $APPNAME == '' || $DIR == '' ]]; then
    echo "appify requires two parameters bash script and app name"
    echo "Usage : appify myscript.sh myapp"
  else
    mkdir -p "$DIR"
    cp "$1" "$DIR/$APPNAME"
    chmod +x "$DIR/$APPNAME"
    echo "$PWD/$APPNAME.app"
  fi
}

# scans for ips in the network given by the first 3 octets
# scannc 192.168.2 [lookup]
scannc() {
  range=$1
  lookup=$2
  for ip in $(eval echo $range.{1..255})
    do
    nc -n -z -w 1 $ip 22 > /dev/null
    if [ $? -eq 0 ]; then
      output="$ip"
      [[ $lookup ]] && [ $lookup != "" ] && output="$ip $(nslookup -timeout=1 $ip  || echo '')"
      echo $output
    else
      echo "."
    fi
  done
}

#w/ ping
scanping() {
  range=$1
  lookup=$2
  for ip in $(eval echo $range.{1..255})
  do
    ping -c1 -t 1 $ip > /dev/null
    if [ $? -eq 0 ]; then
      output="$ip"
      [[ $lookup ]] && [ $lookup != "" ] && output="$ip $(nslookup -timeout=1 $ip  || echo '')"
      echo $output
    else
      echo "."
    fi
  done
}

nc_port_scan() {
  nc -z $1 1-9999
}

# add a cron entry without worrying if that entry exists already
addCron() {
  entry=$1
  crontab -l | egrep "$entry" >> /dev/null
  if [ $? -ne 0 ]; then
    crontab -l > tmp_crontab
    echo "$entry" >> tmp_crontab
    crontab tmp_crontab
    rm tmp_crontab
  fi
}

known_cut() {
  sed -ie ${1}d $HOME/.ssh/known_hosts
}

aux() {
  ps aux | grep $1
}

wgif() {
  local t=$(date '+%d-%m-%Y-%H-%M-%S')
  local name=${2:-$t}
  wget -O $HOME/Downloads/gifs/$name.gif $1
}

kifi() {
  sudo pkill networkd
  sudo ifconfig en0 down
  sudo ifconfig en0 up
  ifconfig -u en0
  sudo ipconfig set en0 DHCP
}

[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"
[[ -s "$HOME/.git_prompt" ]] && . "$HOME/.git_prompt"

# Path to the bash it configuration
export BASH_IT=$HOME/.bash_it

# Lock and Load a custom theme file
# location /.bash_it/themes/
export BASH_IT_THEME='powerline-plus'

# homebrew
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

# linuxbrew
if [ -d "/home/linuxbrew" ]; then
  export PATH='/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin':"$PATH"
fi

# Don't check mail when opening terminal.
unset MAILCHECK

export EDITOR='code'

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Unomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# (Advanced): Uncomment this to make Bash-it reload itself automatically
# after enabling or disabling aliases, plugins, and completions.
# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1
# Load Bash It
source $BASH_IT/bash_it.sh

# asdf-vm related stuff
[[ -s "$HOME/.asdf/asdf.sh" ]] && source "$HOME/.asdf/asdf.sh"
[[ -s "$HOME/.asdf/asdf.sh" ]] && source "$HOME/.asdf/completions/asdf.bash"

setJavaHome() {
  if [[ -d "$HOME/.asdf/plugins/java" ]]; then
    export JAVA_HOME=${HOME}/.asdf/installs/java/$(asdf current java | awk '{print $1}')
  fi
}
setJavaHome

export GATLING_HOME=/usr/local/opt/gatling
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
export PATH=${PATH}:$HOME/.local/bin:$HOME/bin

# history size
export HISTFILESIZE=100000
export HISTSIZE=100000
export HISTCONTROL=ignoredups:erasedups
export BASH_SILENCE_DEPRECATION_WARNING=1
export PATH=/opt/homebrew/sbin:/opt/homebrew/bin:/Users/kevin.krauss/.asdf/shims:/Users/kevin.krauss/.asdf/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Users/kevin.krauss/Library/Android/sdk/tools:/Users/kevin.krauss/Library/Android/sdk/platform-tools:/Users/kevin.krauss/.local/bin:/Users/kevin.krauss/bin:/Users/kevin.krauss/Library/Android/sdk/tools:/Users/kevin.krauss/Library/Android/sdk/platform-tools:/Users/kevin.krauss/.local/bin:/Users/kevin.krauss/bin:$GOPATH/bin
